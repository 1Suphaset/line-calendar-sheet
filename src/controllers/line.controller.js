import { replyMessage, replyWithQuickReply, sendFlexMessage } from "../services/line.service.js";
import { appendRow } from "../services/sheet.service.js";
import {
  createExerciseNotification,
  handleExerciseConfirmation,
  getUserConfirmationStatus,
  createWeeklySummary
} from "../services/exercise.service.js";
import {
  subscribeUser,
  unsubscribeUser,
  isUserSubscribed,
  testNotification
} from "../services/notification.service.js";

import { getTodayString, getTodayBangkok } from "../utils/dateTime.js";

export const handleLineWebhook = async (req, res) => {
  try {
    const events = req.body.events;

    for (let event of events) {
      if (event.type === "message" && event.message.type === "text") {
        const replyToken = event.replyToken;
        const userId = event.source.userId;
        const userMessage = event.message.text.toLowerCase().trim();

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
        if (userMessage === "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢" || userMessage === "exercise") {
          await handleExerciseCommand(replyToken, userId);
        }
        else if (userMessage === "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" || userMessage === "confirm") {
          await handleConfirmationCommand(replyToken, userId, true);
        }
        else if (userMessage === "‡∏Ç‡πâ‡∏≤‡∏°" || userMessage === "skip") {
          await handleConfirmationCommand(replyToken, userId, false);
        }
        else if (userMessage === "‡∏™‡∏£‡∏∏‡∏õ" || userMessage === "summary") {
          await handleSummaryCommand(replyToken, userId);
        }
        else if (userMessage === "‡∏™‡∏°‡∏±‡∏Ñ‡∏£" || userMessage === "subscribe") {
          await handleSubscribeCommand(replyToken, userId);
        }
        else if (userMessage === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" || userMessage === "unsubscribe") {
          await handleUnsubscribeCommand(replyToken, userId);
        }
        else if (userMessage === "‡∏ó‡∏î‡∏™‡∏≠‡∏ö" || userMessage === "test") {
          await handleTestCommand(replyToken, userId);
        }
        else if (userMessage === "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" || userMessage === "help") {
          await handleHelpCommand(replyToken);
        }
        else if (userMessage === "‡πÄ‡∏°‡∏ô‡∏π" || userMessage === "menu") {
          await handleMenuCommand(replyToken);
        }
        else if (userMessage === "‡∏ï‡∏≤‡∏£‡∏≤‡∏á" || userMessage === "schedule") {
          await handleDaySelection(replyToken);
        }
        else {
          // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
          await replyWithQuickReply(
            replyToken,
            "ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢\n\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:",
            [
              { label: "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", text: "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢" },
              { label: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", text: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" },
              { label: "‡∏Ç‡πâ‡∏≤‡∏°", text: "‡∏Ç‡πâ‡∏≤‡∏°" },
              { label: "‡∏™‡∏£‡∏∏‡∏õ", text: "‡∏™‡∏£‡∏∏‡∏õ" },
              { label: "‡πÄ‡∏°‡∏ô‡∏π", text: "‡πÄ‡∏°‡∏ô‡∏π" },
              { label: "‡∏ï‡∏≤‡∏£‡∏≤‡∏á", text: "‡∏ï‡∏≤‡∏£‡∏≤‡∏á" },
            ]
          );
        }
      }
      else if (event.type === "postback") {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Postback events (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö buttons)
        const replyToken = event.replyToken;
        const userId = event.source.userId;
        const data = event.postback.data;
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö postback ‡πÅ‡∏ö‡∏ö key=value&key2=value2
        const params = Object.fromEntries(new URLSearchParams(data));

        if (data === "confirm_exercise" || params.action === "confirm_exercise") {
          await handleConfirmationCommand(replyToken, userId, true);
        } else if (data === "skip_exercise" || params.action === "skip_exercise") {
          await handleConfirmationCommand(replyToken, userId, false);
        } else if (data === "get_exercise" || params.action === "get_exercise") {
          await handleExerciseCommand(replyToken, userId);
        } else if (data === "menu" || params.action === "menu") {
          await handleMenuCommand(replyToken);
        } else if (params.action === "toggle_exercise") {
          await handleToggleExerciseCommand(replyToken, userId, params.idx);
        }
      }
    }

    res.status(200).end();
  } catch (err) {
    console.error("Error in handleLineWebhook:", err);
    res.status(500).send("Error");
  }
};
const createExerciseFlexMessage = (exerciseData, messageFallback) => {
  const exercises = Array.isArray(exerciseData?.exercises) ? exerciseData.exercises : [];
  const checklistContents = exercises.length
    ? exercises.map((ex, idx) => ({
      type: "box",
      layout: "horizontal",
      contents: [
        ex.image ? { type: "image", url: ex.image, size: "sm", aspectMode: "cover", flex: 2 } : {},
        { type: "text", text: `${idx + 1}. ${ex.name}`, size: "sm", wrap: true, flex: 6 },
        { type: "text", text: ex.sets ? `Sets: ${ex.sets}  Reps/Duration: ${ex.reps ?? ex.duration ?? "-"}` : "", size: "sm", color: "#888888", wrap: true, margin: "xs" },
        { type: "button", style: "secondary", height: "sm", flex: 2, action: { type: "postback", label: "‚úÖ", data: `action=toggle_exercise&idx=${idx}`, displayText: `‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß: ${ex.name}` } }
      ],
      margin: "sm"
    }))
    : [{ type: "text", text: messageFallback, wrap: true, size: "sm" }];


  return {
    type: "flex",
    altText: "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
    contents: {
      type: "bubble",
      header: { type: "box", layout: "vertical", contents: [{ type: "text", text: "üèãÔ∏è‚Äç‚ôÄÔ∏è ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", weight: "bold", size: "lg", color: "#1DB446" }] },
      body: {
        type: "box", layout: "vertical", contents: [
          { type: "text", text: exerciseData?.focus ? `üéØ ‡πÇ‡∏ü‡∏Å‡∏±‡∏™: ${exerciseData.focus}` : "", size: "sm", wrap: true, margin: "xs" },
          { type: "text", text: "‡πÄ‡∏ä‡πá‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏£‡∏≤‡∏¢‡∏ó‡πà‡∏≤:", weight: "bold", margin: "md", size: "sm" },
          ...checklistContents
        ]
      },
      footer: {
        type: "box", layout: "vertical", contents: [
          { type: "button", action: { type: "postback", label: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", data: "confirm_exercise", displayText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß" }, style: "primary", color: "#1DB446" },
          { type: "button", action: { type: "postback", label: "‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", data: "skip_exercise", displayText: "‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" }, style: "secondary" }
        ]
      }
    }
  };
};

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
const handleExerciseCommand = async (replyToken, userId) => {
  try {
    const result = await createExerciseNotification(userId);

    if (result.success) {

      const flexMessage = createExerciseFlexMessage(result.exerciseData, result.message);
      await sendFlexMessage(replyToken, flexMessage);
    } else {
      await replyMessage(replyToken, result.message);
    }
  } catch (error) {
    console.error("Error in handleExerciseCommand:", error);
    await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢");
  }
};
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
const handleConfirmationCommand = async (replyToken, userId, confirmed) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const status = getUserConfirmationStatus(userId);

    if (status.hasConfirmed) {
      await replyMessage(
        replyToken,
        "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß\n" +
        `‡πÄ‡∏ß‡∏•‡∏≤: ${status.timestamp}`
      );
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô -> ‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
    const result = await handleExerciseConfirmation(userId, confirmed);

    if (result.success) {
      if (result.flex) {
        await sendFlexMessage(replyToken, {
          type: 'flex',
          altText: '‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
          contents: result.flex.contents
        });
      } else {
        await replyMessage(replyToken, result.message);
      }
    } else {
      await replyMessage(replyToken, result.message);
    }
  } catch (error) {
    console.error("Error in handleConfirmationCommand:", error);
    await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô");
  }
};


// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ
const handleSummaryCommand = async (replyToken, userId) => {
  try {
    const result = await createWeeklySummary(userId);

    if (result.success) {
      await replyMessage(replyToken, result.message);
    } else {
      await replyMessage(replyToken, result.message);
    }
  } catch (error) {
    console.error("Error in handleSummaryCommand:", error);
    await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ");
  }
};

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
const handleHelpCommand = async (replyToken) => {
  const helpMessage =
    "ü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n" +
    "üèãÔ∏è‚Äç‚ôÄÔ∏è '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢' - ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n" +
    "‚úÖ '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' - ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n" +
    "‚è≠Ô∏è '‡∏Ç‡πâ‡∏≤‡∏°' - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n" +
    "üìä '‡∏™‡∏£‡∏∏‡∏õ' - ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ\n" +
    "üîî '‡∏™‡∏°‡∏±‡∏Ñ‡∏£' - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n" +
    "üîï '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n" +
    "üß™ '‡∏ó‡∏î‡∏™‡∏≠‡∏ö' - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n" +
    "‚ùì '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' - ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n" +
    "üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!";

  await replyWithQuickReply(replyToken, helpMessage, [
    { label: "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", text: "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢" },
    { label: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", text: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" },
    { label: "‡∏Ç‡πâ‡∏≤‡∏°", text: "‡∏Ç‡πâ‡∏≤‡∏°" },
    { label: "‡∏™‡∏£‡∏∏‡∏õ", text: "‡∏™‡∏£‡∏∏‡∏õ" },
    { label: "‡πÄ‡∏°‡∏ô‡∏π", text: "‡πÄ‡∏°‡∏ô‡∏π" },
    { label: "‡∏ï‡∏≤‡∏£‡∏≤‡∏á", text: "‡∏ï‡∏≤‡∏£‡∏≤‡∏á" },
  ]);
};

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏ä‡πá‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏£‡∏≤‡∏¢‡∏ó‡πà‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏ö‡∏ö idempotent)
const handleToggleExerciseCommand = async (replyToken, userId, rawIdx) => {
  try {
    const idx = parseInt(rawIdx, 10);
    if (Number.isNaN(idx)) {
      await replyMessage(replyToken, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }

    // ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡πà‡∏≤
    const today = getTodayBangkok();
    const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    const todayKey = dayKeys[today.getDay()];
    const planResult = await createExerciseNotification(userId, todayKey);
    const exercises = planResult?.exerciseData?.exercises || [];
    const target = exercises[idx];
    if (!Array.isArray(exercises) || !target) {
      await replyMessage(replyToken, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
      return;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å 1 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏ö‡∏ö idempotent
    const row = [
      userId,
      getTodayString(),
      planResult.exerciseData.day,
      'Exercise Confirmed',
      `${idx + 1}. ${target.name}`,
      target.sets ?? '',
      target.reps ?? target.duration ?? '',
      'single'
    ];
    // ‡πÉ‡∏ä‡πâ appendRowsIfNotExists ‡∏ú‡πà‡∏≤‡∏ô exercise.service (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏ô) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á sheet.service ‡∏Å‡πá‡πÑ‡∏î‡πâ
    const { appendRowsIfNotExists } = await import('../services/sheet.service.js');
    await appendRowsIfNotExists([row]);

    await replyMessage(replyToken, `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß: ${target.name}`);
  } catch (error) {
    console.error('Error in handleToggleExerciseCommand:', error);
    await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
  }
};
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π (Flex + Postback) ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢
const handleMenuCommand = async (replyToken) => {
  const menuFlex = {
    type: "flex",
    altText: "‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    contents: {
      type: "carousel",
      contents: [
        // Bubble 1: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
        {
          type: "bubble",
          hero: {
            type: "image",
            url: "https://images.unsplash.com/photo-1517836357463-d25dfeac3438?w=1200",
            size: "full",
            aspectRatio: "20:13",
            aspectMode: "cover",
          },
          body: {
            type: "box",
            layout: "vertical",
            spacing: "md",
            contents: [
              { type: "text", text: "üèãÔ∏è‚Äç‚ôÄÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", weight: "bold", size: "lg" },
              { type: "text", text: "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", size: "sm", color: "#555555", wrap: true },
            ],
          },
          footer: {
            type: "box",
            layout: "vertical",
            spacing: "sm",
            contents: [
              {
                type: "button",
                style: "primary",
                color: "#1DB446",
                action: { type: "postback", label: "‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á", data: "get_exercise", displayText: "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢" },
              },
            ],
          },
        },
        // Bubble 2: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‡∏Ç‡πâ‡∏≤‡∏°
        {
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            spacing: "md",
            contents: [
              { type: "text", text: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô / ‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°", weight: "bold", size: "lg" },
              { type: "text", text: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", size: "sm", color: "#555555", wrap: true },
            ],
          },
          footer: {
            type: "box",
            layout: "vertical",
            spacing: "sm",
            contents: [
              {
                type: "button",
                style: "primary",
                color: "#1DB446",
                action: { type: "postback", label: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", data: "confirm_exercise", displayText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" },
              },
              {
                type: "button",
                style: "secondary",
                color: "#AAAAAA",
                action: { type: "postback", label: "‡∏Ç‡πâ‡∏≤‡∏°", data: "skip_exercise", displayText: "‡∏Ç‡πâ‡∏≤‡∏°" },
              },
            ],
          },
        },
        // Bubble 3: ‡∏™‡∏£‡∏∏‡∏õ / ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        {
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            spacing: "md",
            contents: [
              { type: "text", text: "üìä ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ", weight: "bold", size: "lg" },
              { type: "text", text: "‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", size: "sm", color: "#555555", wrap: true },
            ],
          },
          footer: {
            type: "box",
            layout: "vertical",
            spacing: "sm",
            contents: [
              { type: "button", style: "primary", color: "#1DB446", action: { type: "message", label: "‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ", text: "‡∏™‡∏£‡∏∏‡∏õ" } },
              { type: "button", style: "secondary", color: "#AAAAAA", action: { type: "message", label: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", text: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" } },
            ],
          },
        },
      ],
    },
  };

  await sendFlexMessage(replyToken, menuFlex);
};

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
const handleSubscribeCommand = async (replyToken, userId) => {
  try {
    if (isUserSubscribed(userId)) {
      await replyMessage(replyToken,
        "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß!\n\n" +
        "üîî ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢:\n" +
        "‚Ä¢ ‡∏ï‡∏≠‡∏ô 7:00 ‡∏ô. ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô\n" +
        "‚Ä¢ ‡∏ï‡∏≠‡∏ô 18:00 ‡∏ô. ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢)\n" +
        "‚Ä¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå\n\n" +
        "‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
      );
    } else {
      subscribeUser(userId);
      await replyMessage(replyToken,
        "üéâ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n" +
        "üîî ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢:\n" +
        "‚Ä¢ ‡∏ï‡∏≠‡∏ô 7:00 ‡∏ô. ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô\n" +
        "‚Ä¢ ‡∏ï‡∏≠‡∏ô 18:00 ‡∏ô. ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢)\n" +
        "‚Ä¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå\n\n" +
        "üí™ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?"
      );
    }
  } catch (error) {
    console.error("Error in handleSubscribeCommand:", error);
    await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
  }
};

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
const handleUnsubscribeCommand = async (replyToken, userId) => {
  try {
    if (isUserSubscribed(userId)) {
      unsubscribeUser(userId);
      await replyMessage(replyToken,
        "üîï ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n" +
        "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ\n\n" +
        "üí° ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏™‡∏°‡∏±‡∏Ñ‡∏£' ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
      );
    } else {
      await replyMessage(replyToken,
        "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n\n" +
        "‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏™‡∏°‡∏±‡∏Ñ‡∏£' ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"
      );
    }
  } catch (error) {
    console.error("Error in handleUnsubscribeCommand:", error);
    await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
  }
};

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const handleTestCommand = async (replyToken, userId) => {
  try {
    const result = await testNotification(userId);

    if (result.success) {
      await replyMessage(replyToken,
        "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n" +
        "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n" +
        "üí° ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á"
      );
    } else {
      await replyMessage(replyToken,
        "‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß\n\n" +
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"
      );
    }
  } catch (error) {
    console.error("Error in handleTestCommand:", error);
    await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö");
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
  const createExerciseFlexMessageByDay = (exerciseData, messageFallback) => {
    if (!exerciseData) return { type: "text", text: messageFallback };

    const exercises = Array.isArray(exerciseData.exercises) ? exerciseData.exercises : [];
    const checklistContents = exercises.length
      ? exercises.map((ex, idx) => ({
        type: "box",
        layout: "horizontal",
        contents: [
          ex.image ? { type: "image", url: ex.image, size: "sm", aspectMode: "cover", flex: 2 } : {},
          { type: "text", text: `${idx + 1}. ${ex.name}`, size: "sm", wrap: true, flex: 6 },
          { type: "text", text: ex.sets ? `Sets: ${ex.sets}  Reps: ${ex.reps ?? ex.duration ?? "-"}` : "", size: "sm", color: "#888888", wrap: true, flex: 4 }
        ],
        margin: "sm"
      }))
      : [{ type: "text", text: messageFallback, wrap: true, size: "sm" }];

    return {
      type: "flex",
      altText: `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ß‡∏±‡∏ô${exerciseData.day}`,
      contents: {
        type: "bubble",
        header: { type: "box", layout: "vertical", contents: [{ type: "text", text: `üèãÔ∏è‚Äç‚ôÄÔ∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ß‡∏±‡∏ô${exerciseData.day}`, weight: "bold", size: "lg", color: "#1DB446" }] },
        body: {
          type: "box",
          layout: "vertical",
          contents: [
            { type: "text", text: exerciseData.focus ? `üéØ ‡πÇ‡∏ü‡∏Å‡∏±‡∏™: ${exerciseData.focus}` : "", size: "sm", wrap: true, margin: "xs" },
            exercises.length ? { type: "text", text: "‡πÄ‡∏ä‡πá‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏£‡∏≤‡∏¢‡∏ó‡πà‡∏≤:", weight: "bold", margin: "md", size: "sm" } : {},
            ...checklistContents,
            exerciseData.rest ? { type: "text", text: `‚è±Ô∏è ‡∏û‡∏±‡∏Å: ${exerciseData.rest}`, size: "sm", color: "#888888", wrap: true, margin: "md" } : {}
          ]
        }
      }
    };
  };// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
  const handleExerciseByDayCommand = async (replyToken, dayKey) => {
    try {
      const exerciseData = exerciseSchedule[dayKey];
      if (!exerciseData) {
        await replyMessage(replyToken, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô");
        return;
      }

      const flexMessage = createExerciseFlexMessageByDay(exerciseData, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢");
      await sendFlexMessage(replyToken, flexMessage);
    } catch (error) {
      console.error("Error in handleExerciseByDayCommand:", error);
      await replyMessage(replyToken, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢");
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleDaySelection (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å webhook)
  const handleDaySelection = async (replyToken, userMessage) => {
    const dayMap = {
      "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå": "monday",
      "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£": "tuesday",
      "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò": "wednesday",
      "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™": "thursday",
      "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå": "friday",
      "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå": "saturday",
      "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå": "sunday",
    };
    const dayKey = dayMap[userMessage];
    if (dayKey) {
      await handleExerciseByDayCommand(replyToken, dayKey);
    } else {
      // ‡∏™‡πà‡∏á Quick Reply ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
      await replyWithQuickReply(replyToken, "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô:", quickReplyDayMenu);
    }
  };

};