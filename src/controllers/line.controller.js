import { replyMessage, replyWithQuickReply, sendFlexMessage } from "../services/line.service.js";
import { appendRow } from "../services/sheet.service.js";
import { 
  createExerciseNotification, 
  handleExerciseConfirmation, 
  getUserConfirmationStatus,
  createWeeklySummary 
} from "../services/exercise.service.js";
import { 
  subscribeUser, 
  unsubscribeUser, 
  isUserSubscribed,
  testNotification 
} from "../services/notification.service.js";

import { getTodayString } from "../utils/dateTime.js";

export const handleLineWebhook = async (req, res) => {
  try {
    const events = req.body.events;

    for (let event of events) {
      if (event.type === "message" && event.message.type === "text") {
        const replyToken = event.replyToken;
        const userId = event.source.userId;
        const userMessage = event.message.text.toLowerCase().trim();

        // р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Хр╣Ир╕▓р╕Зр╣Ж
        if (userMessage === "р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в" || userMessage === "exercise") {
          await handleExerciseCommand(replyToken, userId);
        } 
        else if (userMessage === "р╕вр╕╖р╕Щр╕вр╕▒р╕Щ" || userMessage === "confirm") {
          await handleConfirmationCommand(replyToken, userId, true);
        }
        else if (userMessage === "р╕Вр╣Йр╕▓р╕б" || userMessage === "skip") {
          await handleConfirmationCommand(replyToken, userId, false);
        }
        else if (userMessage === "р╕кр╕гр╕╕р╕Ы" || userMessage === "summary") {
          await handleSummaryCommand(replyToken, userId);
        }
        else if (userMessage === "р╕кр╕бр╕▒р╕Др╕г" || userMessage === "subscribe") {
          await handleSubscribeCommand(replyToken, userId);
        }
        else if (userMessage === "р╕вр╕Бр╣Ар╕ер╕┤р╕Б" || userMessage === "unsubscribe") {
          await handleUnsubscribeCommand(replyToken, userId);
        }
        else if (userMessage === "р╕Чр╕Фр╕кр╕нр╕Ъ" || userMessage === "test") {
          await handleTestCommand(replyToken, userId);
        }
        else if (userMessage === "р╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н" || userMessage === "help") {
          await handleHelpCommand(replyToken);
        }
        else if (userMessage === "р╣Ар╕бр╕Щр╕╣" || userMessage === "menu") {
          await handleMenuCommand(replyToken);
        }
        else {
          // р╕Др╕│р╕кр╕▒р╣Ир╕Зр╣Др╕бр╣Ир╕гр╕╣р╣Йр╕Ир╕▒р╕Б
          await replyWithQuickReply(
            replyToken,
            "ЁЯдЦ р╕кр╕зр╕▒р╕кр╕Фр╕╡! р╕Йр╕▒р╕Щр╣Ар╕Ыр╣Зр╕Щр╕Ър╕нр╕Чр╕Кр╣Ир╕зр╕вр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в\n\nр╣Ар╕ер╕╖р╕нр╕Бр╣Ар╕бр╕Щр╕╣р╕Фр╣Йр╕▓р╕Щр╕ер╣Ир╕▓р╕Зр╕лр╕гр╕╖р╕нр╕Юр╕┤р╕бр╕Юр╣Мр╕Др╕│р╕кр╕▒р╣Ир╕З:",
            [
              { label: "р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в", text: "р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в" },
              { label: "р╕вр╕╖р╕Щр╕вр╕▒р╕Щ", text: "р╕вр╕╖р╕Щр╕вр╕▒р╕Щ" },
              { label: "р╕Вр╣Йр╕▓р╕б", text: "р╕Вр╣Йр╕▓р╕б" },
              { label: "р╕кр╕гр╕╕р╕Ы", text: "р╕кр╕гр╕╕р╕Ы" },
              { label: "р╣Ар╕бр╕Щр╕╣", text: "р╣Ар╕бр╕Щр╕╣" },
            ]
          );
        }
      }
      else if (event.type === "postback") {
        // р╕Ир╕▒р╕Фр╕Бр╕▓р╕г Postback events (р╕кр╕│р╕лр╕гр╕▒р╕Ъ buttons)
        const replyToken = event.replyToken;
        const userId = event.source.userId;
        const data = event.postback.data;
        // р╕гр╕нр╕Зр╕гр╕▒р╕Ъ postback р╣Бр╕Ър╕Ъ key=value&key2=value2
        const params = Object.fromEntries(new URLSearchParams(data));

        if (data === "confirm_exercise" || params.action === "confirm_exercise") {
          await handleConfirmationCommand(replyToken, userId, true);
        } else if (data === "skip_exercise" || params.action === "skip_exercise") {
          await handleConfirmationCommand(replyToken, userId, false);
        } else if (data === "get_exercise" || params.action === "get_exercise") {
          await handleExerciseCommand(replyToken, userId);
        } else if (data === "menu" || params.action === "menu") {
          await handleMenuCommand(replyToken);
        } else if (params.action === "toggle_exercise") {
          await handleToggleExerciseCommand(replyToken, userId, params.idx);
        }
      }
    }

    res.status(200).end();
  } catch (err) {
    console.error("Error in handleLineWebhook:", err);
    res.status(500).send("Error");
  }
};

// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕Зр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в
const handleExerciseCommand = async (replyToken, userId) => {
  try {
    const result = await createExerciseNotification(userId);
    
    if (result.success) {
      // р╕кр╕гр╣Йр╕▓р╕З Flex Message р╕Юр╕гр╣Йр╕нр╕бр╕Ыр╕╕р╣Ир╕бр╕вр╕╖р╕Щр╕вр╕▒р╕Щ р╣Бр╕ер╕░р╣Ар╕Кр╣Зр╕Бр╕ер╕┤р╕кр╕Хр╣Мр╕гр╕▓р╕вр╕Чр╣Ир╕▓
      const checklistContents = Array.isArray(result.exerciseData.exercises)
        ? result.exerciseData.exercises.map((ex, idx) => ({
            type: "box",
            layout: "horizontal",
            contents: [
              { type: "text", text: `${idx + 1}. ${ex.name}`, size: "sm", wrap: true, flex: 6 },
              { type: "button", style: "secondary", height: "sm", flex: 2, action: { type: "postback", label: "тЬЕ", data: `action=toggle_exercise&idx=${idx}`, displayText: `р╕Чр╕│р╣Бр╕ер╣Йр╕з: ${ex.name}` } }
            ],
            margin: "sm"
          }))
        : [{ type: "text", text: result.message, wrap: true, size: "sm" }];

      const flexMessage = {
        type: "flex",
        altText: "р╕Хр╕▓р╕гр╕▓р╕Зр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╕зр╕▒р╕Щр╕Щр╕╡р╣Й",
        contents: {
          type: "bubble",
          header: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "ЁЯПЛя╕ПтАНтЩАя╕П р╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╕зр╕▒р╕Щр╕Щр╕╡р╣Й",
                weight: "bold",
                size: "lg",
                color: "#1DB446"
              }
            ]
          },
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              { type: "text", text: result.exerciseData.focus ? `ЁЯОп р╣Вр╕Яр╕Бр╕▒р╕к: ${result.exerciseData.focus}` : "", size: "sm", wrap: true, margin: "xs" },
              { type: "text", text: "р╣Ар╕Кр╣Зр╕Бр╕ер╕┤р╕кр╕Хр╣Мр╕гр╕▓р╕вр╕Чр╣Ир╕▓:", weight: "bold", margin: "md", size: "sm" },
              ...checklistContents
            ]
          },
          footer: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "button",
                action: {
                  type: "postback",
                  label: "тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в",
                  data: "confirm_exercise",
                  displayText: "р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╣Бр╕ер╣Йр╕з"
                },
                style: "primary",
                color: "#1DB446"
              },
              {
                type: "button",
                action: {
                  type: "postback",
                  label: "тПня╕П р╕Вр╣Йр╕▓р╕бр╕зр╕▒р╕Щр╕Щр╕╡р╣Й",
                  data: "skip_exercise",
                  displayText: "р╕Вр╣Йр╕▓р╕бр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╕зр╕▒р╕Щр╕Щр╕╡р╣Й"
                },
                style: "secondary"
              }
            ]
          }
        }
      };

      await sendFlexMessage(replyToken, flexMessage);
    } else {
      await replyMessage(replyToken, result.message);
    }
  } catch (error) {
    console.error("Error in handleExerciseCommand:", error);
    await replyMessage(replyToken, "р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в");
  }
};
// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕Зр╕вр╕╖р╕Щр╕вр╕▒р╕Щ
const handleConfirmationCommand = async (replyToken, userId, confirmed) => {
  try {
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░р╕зр╕▒р╕Щр╕Щр╕╡р╣Й
    const status = getUserConfirmationStatus(userId);

    if (status.hasConfirmed) {
      await replyMessage(
        replyToken, 
        "тЬЕ р╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╕кр╕│р╕лр╕гр╕▒р╕Ър╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╣Бр╕ер╣Йр╕з\n" +
        `р╣Ар╕зр╕ер╕▓: ${status.timestamp}`
      );
      return;
    }

    // р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Ар╕Др╕вр╕вр╕╖р╕Щр╕вр╕▒р╕Щ -> р╣Др╕Ыр╕Чр╕│р╕Зр╕▓р╕Щр╕Хр╣Ир╕н
    const result = await handleExerciseConfirmation(userId, confirmed);

    if (result.success) {
      if (result.flex) {
        await sendFlexMessage(replyToken, { 
          type: 'flex', 
          altText: 'р╕кр╕гр╕╕р╕Ыр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М', 
          contents: result.flex.contents 
        });
      } else {
        await replyMessage(replyToken, result.message);
      }
    } else {
      await replyMessage(replyToken, result.message);
    }
  } catch (error) {
    console.error("Error in handleConfirmationCommand:", error);
    await replyMessage(replyToken, "р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕вр╕╖р╕Щр╕вр╕▒р╕Щ");
  }
};


// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕Зр╕кр╕гр╕╕р╕Ы
const handleSummaryCommand = async (replyToken, userId) => {
  try {
    const result = await createWeeklySummary(userId);
    
    if (result.success) {
      await replyMessage(replyToken, result.message);
    } else {
      await replyMessage(replyToken, result.message);
    }
  } catch (error) {
    console.error("Error in handleSummaryCommand:", error);
    await replyMessage(replyToken, "р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕кр╕гр╕╕р╕Ы");
  }
};

// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н
const handleHelpCommand = async (replyToken) => {
  const helpMessage = 
    "ЁЯдЦ р╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╣Др╕Фр╣Й:\n\n" +
    "ЁЯПЛя╕ПтАНтЩАя╕П 'р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в' - р╕Фр╕╣р╕Хр╕▓р╕гр╕▓р╕Зр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╕зр╕▒р╕Щр╕Щр╕╡р╣Й\n" +
    "тЬЕ 'р╕вр╕╖р╕Щр╕вр╕▒р╕Щ' - р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕зр╣Ир╕▓р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╣Бр╕ер╣Йр╕з\n" +
    "тПня╕П 'р╕Вр╣Йр╕▓р╕б' - р╕Вр╣Йр╕▓р╕бр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╕зр╕▒р╕Щр╕Щр╕╡р╣Й\n" +
    "ЁЯУК 'р╕кр╕гр╕╕р╕Ы' - р╕Фр╕╣р╕кр╕гр╕╕р╕Ыр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣Мр╕Щр╕╡р╣Й\n" +
    "ЁЯФФ 'р╕кр╕бр╕▒р╕Др╕г' - р╕кр╕бр╕▒р╕Др╕гр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ\n" +
    "ЁЯФХ 'р╕вр╕Бр╣Ар╕ер╕┤р╕Б' - р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ\n" +
    "ЁЯзк 'р╕Чр╕Фр╕кр╕нр╕Ъ' - р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ\n" +
    "тЭУ 'р╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н' - р╕Фр╕╣р╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф\n\n" +
    "ЁЯТб р╣Ар╕Др╕ер╣Зр╕Фр╕ер╕▒р╕Ъ: р╕Юр╕┤р╕бр╕Юр╣М 'р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в' р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕зр╕▒р╕Щр╕Щр╕╡р╣Й!";

  await replyWithQuickReply(replyToken, helpMessage, [
    { label: "р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в", text: "р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в" },
    { label: "р╕вр╕╖р╕Щр╕вр╕▒р╕Щ", text: "р╕вр╕╖р╕Щр╕вр╕▒р╕Щ" },
    { label: "р╕Вр╣Йр╕▓р╕б", text: "р╕Вр╣Йр╕▓р╕б" },
    { label: "р╕кр╕гр╕╕р╕Ы", text: "р╕кр╕гр╕╕р╕Ы" },
    { label: "р╣Ар╕бр╕Щр╕╣", text: "р╣Ар╕бр╕Щр╕╣" },
  ]);
};

// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Бр╕▓р╕гр╕Хр╕┤р╣Кр╕Бр╣Ар╕Кр╣Зр╕Бр╕ер╕┤р╕кр╕Хр╣Мр╕гр╕▓р╕вр╕Чр╣Ир╕▓ (р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Ар╕Фр╕╡р╕вр╕зр╣Бр╕Ър╕Ъ idempotent)
const handleToggleExerciseCommand = async (replyToken, userId, rawIdx) => {
  try {
    const idx = parseInt(rawIdx, 10);
    if (Number.isNaN(idx)) {
      await replyMessage(replyToken, "р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З");
      return;
    }

    // р╕нр╣Ир╕▓р╕Щр╣Бр╕Ьр╕Щр╕Вр╕нр╕Зр╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╕Чр╕гр╕▓р╕Ър╕Кр╕╖р╣Ир╕нр╕Чр╣Ир╕▓
    const today = getTodayString();
    const dayKeys = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    const todayKey = dayKeys[today.getDay()];
    const planResult = await createExerciseNotification(userId, todayKey);
    const exercises = planResult?.exerciseData?.exercises || [];
    const target = exercises[idx];
    if (!target) {
      await replyMessage(replyToken, "р╣Др╕бр╣Ир╕Юр╕Ър╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╣Ир╕▓р╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б");
      return;
    }

    // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Б 1 р╣Бр╕Цр╕зр╣Бр╕Ър╕Ъ idempotent
    const row = [
      userId,
      getTodayString(),
      planResult.exerciseData.day,
      'Exercise Confirmed',
      `${idx + 1}. ${target.name}`,
      target.sets ?? '',
      target.reps ?? target.duration ?? '',
      'single'
    ];
    // р╣Гр╕Кр╣Й appendRowsIfNotExists р╕Ьр╣Ир╕▓р╕Щ exercise.service (р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Чр╕╡р╣Ир╕Щр╕▒р╣Ир╕Щ) р╕лр╕гр╕╖р╕нр╣Ар╕гр╕╡р╕вр╕Бр╕Хр╕гр╕З sheet.service р╕Бр╣Зр╣Др╕Фр╣Й
    const { appendRowsIfNotExists } = await import('../services/sheet.service.js');
    await appendRowsIfNotExists([row]);

    await replyMessage(replyToken, `р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Бр╕ер╣Йр╕з: ${target.name}`);
  } catch (error) {
    console.error('Error in handleToggleExerciseCommand:', error);
    await replyMessage(replyToken, "р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Б");
  }
};

// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕Зр╣Ар╕бр╕Щр╕╣ (Flex + Postback)
const handleMenuCommand = async (replyToken) => {
  const menuFlex = {
    type: "flex",
    altText: "р╣Ар╕бр╕Щр╕╣р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ",
    contents: {
      type: "carousel",
      contents: [
        {
          type: "bubble",
          hero: {
            type: "image",
            url: "https://images.unsplash.com/photo-1517836357463-d25dfeac3438?w=1200",
            size: "full",
            aspectRatio: "20:13",
            aspectMode: "cover",
          },
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              { type: "text", text: "р╣Ар╕гр╕┤р╣Ир╕бр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в", weight: "bold", size: "md" },
              { type: "text", text: "р╕Фр╕╣р╕Хр╕▓р╕гр╕▓р╕Зр╕Вр╕нр╕Зр╕зр╕▒р╕Щр╕Щр╕╡р╣Й", size: "sm", color: "#888888" },
            ],
          },
          footer: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "button",
                style: "primary",
                color: "#1DB446",
                action: { type: "postback", label: "р╕Фр╕╣р╕Хр╕▓р╕гр╕▓р╕З", data: "get_exercise", displayText: "р╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в" },
              },
            ],
          },
        },
        {
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              { type: "text", text: "р╕вр╕╖р╕Щр╕вр╕▒р╕Щ/р╕Вр╣Йр╕▓р╕б", weight: "bold", size: "md" },
              { type: "text", text: "р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╕кр╕Цр╕▓р╕Щр╕░р╕зр╕▒р╕Щр╕Щр╕╡р╣Й", size: "sm", color: "#888888" },
            ],
          },
          footer: {
            type: "box",
            layout: "vertical",
            contents: [
              { type: "button", style: "primary", color: "#1DB446", action: { type: "postback", label: "р╕вр╕╖р╕Щр╕вр╕▒р╕Щ", data: "confirm_exercise", displayText: "р╕вр╕╖р╕Щр╕вр╕▒р╕Щ" } },
              { type: "button", style: "secondary", action: { type: "postback", label: "р╕Вр╣Йр╕▓р╕б", data: "skip_exercise", displayText: "р╕Вр╣Йр╕▓р╕б" } },
            ],
          },
        },
        {
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              { type: "text", text: "р╕нр╕╖р╣Ир╕Щ р╣Ж", weight: "bold", size: "md" },
              { type: "text", text: "р╕кр╕гр╕╕р╕Ы/р╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н", size: "sm", color: "#888888" },
            ],
          },
          footer: {
            type: "box",
            layout: "vertical",
            contents: [
              { type: "button", style: "primary", action: { type: "message", label: "р╕Фр╕╣р╕кр╕гр╕╕р╕Ы", text: "р╕кр╕гр╕╕р╕Ы" } },
              { type: "button", style: "secondary", action: { type: "message", label: "р╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н", text: "р╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н" } },
            ],
          },
        },
      ],
    },
  };

  await sendFlexMessage(replyToken, menuFlex);
};

// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕Зр╕кр╕бр╕▒р╕Др╕гр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ
const handleSubscribeCommand = async (replyToken, userId) => {
  try {
    if (isUserSubscribed(userId)) {
      await replyMessage(replyToken, 
        "тЬЕ р╕Др╕╕р╕Ур╣Др╕Фр╣Йр╕кр╕бр╕▒р╕Др╕гр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Бр╕ер╣Йр╕з!\n\n" +
        "ЁЯФФ р╕Др╕╕р╕Ур╕Ир╕░р╣Др╕Фр╣Йр╕гр╕▒р╕Ър╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в:\n" +
        "тАв р╕Хр╕нр╕Щ 7:00 р╕Щ. р╕Чр╕╕р╕Бр╕зр╕▒р╕Щ\n" +
        "тАв р╕Хр╕нр╕Щ 18:00 р╕Щ. р╕Чр╕╕р╕Бр╕зр╕▒р╕Щ (р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в)\n" +
        "тАв р╕кр╕гр╕╕р╕Ыр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣Мр╕Чр╕╕р╕Бр╕зр╕▒р╕Щр╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М\n\n" +
        "р╕Юр╕┤р╕бр╕Юр╣М 'р╕вр╕Бр╣Ар╕ер╕┤р╕Б' р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕лр╕вр╕╕р╕Фр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ"
      );
    } else {
      subscribeUser(userId);
      await replyMessage(replyToken, 
        "ЁЯОЙ р╕кр╕бр╕▒р╕Др╕гр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И!\n\n" +
        "ЁЯФФ р╕Др╕╕р╕Ур╕Ир╕░р╣Др╕Фр╣Йр╕гр╕▒р╕Ър╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в:\n" +
        "тАв р╕Хр╕нр╕Щ 7:00 р╕Щ. р╕Чр╕╕р╕Бр╕зр╕▒р╕Щ\n" +
        "тАв р╕Хр╕нр╕Щ 18:00 р╕Щ. р╕Чр╕╕р╕Бр╕зр╕▒р╕Щ (р╕Цр╣Йр╕▓р╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в)\n" +
        "тАв р╕кр╕гр╕╕р╕Ыр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣Мр╕Чр╕╕р╕Бр╕зр╕▒р╕Щр╕нр╕▓р╕Чр╕┤р╕Хр╕вр╣М\n\n" +
        "ЁЯТк р╕Юр╕гр╣Йр╕нр╕бр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╕вр╕▒р╕З?"
      );
    }
  } catch (error) {
    console.error("Error in handleSubscribeCommand:", error);
    await replyMessage(replyToken, "р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕бр╕▒р╕Др╕гр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ");
  }
};

// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕Зр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ
const handleUnsubscribeCommand = async (replyToken, userId) => {
  try {
    if (isUserSubscribed(userId)) {
      unsubscribeUser(userId);
      await replyMessage(replyToken, 
        "ЁЯФХ р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И!\n\n" +
        "р╕Др╕╕р╕Ур╕Ир╕░р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕гр╕▒р╕Ър╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╕нр╕╡р╕Бр╕Хр╣Ир╕нр╣Др╕Ы\n\n" +
        "ЁЯТб р╕Юр╕┤р╕бр╕Юр╣М 'р╕кр╕бр╕▒р╕Др╕г' р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З"
      );
    } else {
      await replyMessage(replyToken, 
        "тЭМ р╕Др╕╕р╕Ур╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕кр╕бр╕▒р╕Др╕гр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ\n\n" +
        "р╕Юр╕┤р╕бр╕Юр╣М 'р╕кр╕бр╕▒р╕Др╕г' р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕в"
      );
    }
  } catch (error) {
    console.error("Error in handleUnsubscribeCommand:", error);
    await replyMessage(replyToken, "р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ");
  }
};

// р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Чр╕Фр╕кр╕нр╕Ъ
const handleTestCommand = async (replyToken, userId) => {
  try {
    const result = await testNotification(userId);
    
    if (result.success) {
      await replyMessage(replyToken, 
        "ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕кр╕│р╣Ар╕гр╣Зр╕И!\n\n" +
        "р╕Др╕╕р╕Ур╕Др╕зр╕гр╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Бр╕▓р╕гр╕нр╕нр╕Бр╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕▓р╕вр╣Бр╕ер╣Йр╕з\n\n" +
        "ЁЯТб р╕лр╕▓р╕Бр╣Др╕бр╣Ир╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б р╣Гр╕лр╣Йр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╣Др╕Фр╣Йр╕кр╕бр╕▒р╕Др╕гр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╕вр╕▒р╕З"
      );
    } else {
      await replyMessage(replyToken, 
        "тЭМ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕ер╣Йр╕бр╣Ар╕лр╕ер╕з\n\n" +
        "р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З р╕лр╕гр╕╖р╕нр╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕Ър╕Ъ"
      );
    }
  } catch (error) {
    console.error("Error in handleTestCommand:", error);
    await replyMessage(replyToken, "р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ");
  }
};
